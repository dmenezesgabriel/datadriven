{
  
    
        "post0": {
            "title": "Introdução a Machine Learning",
            "content": ". Requerimentos . Crie uma conta no Kaggle | Va em My Account, então clique em Create New API Token | Um arquivo chamado kaggle.json será baixado. Crie uma pasta Kaggle em seu google drive, e faça o uploado do arquivo nela | Monte o seu drive para o notebook, executando o código abaixo e seguindo as instruções apresentadas | from google.colab import drive drive.mount(&#39;/content/gdrive&#39;) . Mounted at /content/gdrive . Execute o código abaixo para acessar sua chave de API | import os os.environ[&#39;KAGGLE_CONFIG_DIR&#39;] = &quot;/content/gdrive/My Drive/Kaggle&quot; . Aponte seu diretório para a pasta Kaggle/ criada anteriormente | %cd /content/gdrive/My Drive/Kaggle . /content/gdrive/My Drive/Kaggle . !pwd . /content/gdrive/My Drive/Kaggle . Vá para a url do Kaggle que contenha o dataset desejado, clique nos 3 pontos no canto superior direito e selecione a opção API Command | Cole o comando na célula abaixo e execute! | !kaggle datasets download -d dansbecker/melbourne-housing-snapshot . Downloading melbourne-housing-snapshot.zip to /content/gdrive/My Drive/Kaggle 0% 0.00/451k [00:00&lt;?, ?B/s] 100% 451k/451k [00:00&lt;00:00, 30.7MB/s] . Você pode verificar o conteúdo baixado com o comando abaixo | . !ls -lh . total 452K -rw- 1 root root 65 Sep 18 12:13 kaggle.json -rw- 1 root root 451K Sep 22 21:21 melbourne-housing-snapshot.zip . Descompacte os dados e delete os arquivos zipados | !unzip *.zip &amp;&amp; rm *.zip . Archive: melbourne-housing-snapshot.zip inflating: melb_data.csv . !ls -lh . total 2.0M -rw- 1 root root 65 Sep 18 12:13 kaggle.json -rw- 1 root root 2.0M Sep 21 2019 melb_data.csv . &#193;rvore de decis&#227;o . As arvores de decisão são a base para muitos modelos mais complexos. De modo geral, na computacao, arvores ao estruturas dedados formados por um conjunto de nos, e estes nos armazenam informacoes. . Toda arvoe possui um no raiz, que possui o maior nivel hierarquico e a partir dele nascem as ramificacoes denominadas nos filhos. Os nos que nao possuem filhos sao conhecidos como no folha(leaf). . Em resumo, uma arvore de decisao armazena regras em seus nos e as folhas representam as decisoes a serem tomadas. . Exemplificando: . Assistirei Netflix hoje? +--^--+ Sim Nao | | Dormirei tarde Dormirei cedo . Fitting ou Treinamento: Decisão de como separar os dados em grupos, a partir de captura de padrões dos dados, para então prever o comportamento dos mesmos. . Explora&#231;&#227;o de Dados (b&#225;sica) . O primeiro passo é se familiarizar com os dados. Com a classe DataFrame da biblioteca Pandas podemos visualizar os dados de forma similar a uma tabela do Excel ou banco de dados relacional (SQL). . import pandas as pd . df = pd.read_csv(&#39;melb_data.csv&#39;) . df.head() . Suburb Address Rooms Type Price Method SellerG Date Distance Postcode Bedroom2 Bathroom Car Landsize BuildingArea YearBuilt CouncilArea Lattitude Longtitude Regionname Propertycount . 0 Abbotsford | 85 Turner St | 2 | h | 1480000.0 | S | Biggin | 3/12/2016 | 2.5 | 3067.0 | 2.0 | 1.0 | 1.0 | 202.0 | NaN | NaN | Yarra | -37.7996 | 144.9984 | Northern Metropolitan | 4019.0 | . 1 Abbotsford | 25 Bloomburg St | 2 | h | 1035000.0 | S | Biggin | 4/02/2016 | 2.5 | 3067.0 | 2.0 | 1.0 | 0.0 | 156.0 | 79.0 | 1900.0 | Yarra | -37.8079 | 144.9934 | Northern Metropolitan | 4019.0 | . 2 Abbotsford | 5 Charles St | 3 | h | 1465000.0 | SP | Biggin | 4/03/2017 | 2.5 | 3067.0 | 3.0 | 2.0 | 0.0 | 134.0 | 150.0 | 1900.0 | Yarra | -37.8093 | 144.9944 | Northern Metropolitan | 4019.0 | . 3 Abbotsford | 40 Federation La | 3 | h | 850000.0 | PI | Biggin | 4/03/2017 | 2.5 | 3067.0 | 3.0 | 2.0 | 1.0 | 94.0 | NaN | NaN | Yarra | -37.7969 | 144.9969 | Northern Metropolitan | 4019.0 | . 4 Abbotsford | 55a Park St | 4 | h | 1600000.0 | VB | Nelson | 4/06/2016 | 2.5 | 3067.0 | 3.0 | 1.0 | 2.0 | 120.0 | 142.0 | 2014.0 | Yarra | -37.8072 | 144.9941 | Northern Metropolitan | 4019.0 | . Interpretando os dados . df.describe() . Rooms Price Distance Postcode Bedroom2 Bathroom Car Landsize BuildingArea YearBuilt Lattitude Longtitude Propertycount . count 13580.000000 | 1.358000e+04 | 13580.000000 | 13580.000000 | 13580.000000 | 13580.000000 | 13518.000000 | 13580.000000 | 7130.000000 | 8205.000000 | 13580.000000 | 13580.000000 | 13580.000000 | . mean 2.937997 | 1.075684e+06 | 10.137776 | 3105.301915 | 2.914728 | 1.534242 | 1.610075 | 558.416127 | 151.967650 | 1964.684217 | -37.809203 | 144.995216 | 7454.417378 | . std 0.955748 | 6.393107e+05 | 5.868725 | 90.676964 | 0.965921 | 0.691712 | 0.962634 | 3990.669241 | 541.014538 | 37.273762 | 0.079260 | 0.103916 | 4378.581772 | . min 1.000000 | 8.500000e+04 | 0.000000 | 3000.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 1196.000000 | -38.182550 | 144.431810 | 249.000000 | . 25% 2.000000 | 6.500000e+05 | 6.100000 | 3044.000000 | 2.000000 | 1.000000 | 1.000000 | 177.000000 | 93.000000 | 1940.000000 | -37.856822 | 144.929600 | 4380.000000 | . 50% 3.000000 | 9.030000e+05 | 9.200000 | 3084.000000 | 3.000000 | 1.000000 | 2.000000 | 440.000000 | 126.000000 | 1970.000000 | -37.802355 | 145.000100 | 6555.000000 | . 75% 3.000000 | 1.330000e+06 | 13.000000 | 3148.000000 | 3.000000 | 2.000000 | 2.000000 | 651.000000 | 174.000000 | 1999.000000 | -37.756400 | 145.058305 | 10331.000000 | . max 10.000000 | 9.000000e+06 | 48.100000 | 3977.000000 | 20.000000 | 8.000000 | 10.000000 | 433014.000000 | 44515.000000 | 2018.000000 | -37.408530 | 145.526350 | 21650.000000 | . count: mostra o numero de linhas com valores nao nulos. | mean: e a media simples. | std: o desvio padrao demonstra o quanto os dados estao espalhados em relacao a media. | min &amp; max: sao o menor e maior valor da amostra, respectivamente. | 25%, 50% e 75%: estes valores sao as representacoes dos percentis ou quartis. Imagine que voce ordenou todos os valores em order cresente, e se voce percorrer 1/4 da lista, voce chegara em um numero que e maior que os 25% anteriores, ou seja, 25% das ocorrencias do conjunto de dados chegam ate este valor. Se andarmos mais 25%, encontraremos a mediana, onde entao ate 50% dos dados estao abaixo do valor ncontrado. Podmos utilizar essa medida estatistica para detectar anomalias, por exemplo, olhando para 0.99 percentil, ate 99% dos casos estao abaixo desse valor, se os 1% acima distoarem muito dele, as vezes podem ser considerados como valores anomalos. | . Qual a idade da casa constuida mais recentemente? . from datetime import datetime # Age of the most recent builded home datetime.now().today().year - df.YearBuilt.max() . 2.0 . Quais conclusoes podemos tirar? . Nao foram construidas novas casas desde que os dados foram coletados | Os dados podem nao ser tao recentes | . Qual e o tamanho medio do terreno? . df.BuildingArea.mean() . 151.96764988779805 . Selecionando dados para modelagem . df.columns . Index([&#39;Suburb&#39;, &#39;Address&#39;, &#39;Rooms&#39;, &#39;Type&#39;, &#39;Price&#39;, &#39;Method&#39;, &#39;SellerG&#39;, &#39;Date&#39;, &#39;Distance&#39;, &#39;Postcode&#39;, &#39;Bedroom2&#39;, &#39;Bathroom&#39;, &#39;Car&#39;, &#39;Landsize&#39;, &#39;BuildingArea&#39;, &#39;YearBuilt&#39;, &#39;CouncilArea&#39;, &#39;Lattitude&#39;, &#39;Longtitude&#39;, &#39;Regionname&#39;, &#39;Propertycount&#39;], dtype=&#39;object&#39;) . df.isnull().values.any() . True . Os dads possuem valores nulos, entao optaremos pelo caminho mais simples neste primeiro momento e droparemos os valores nulos . df = df.dropna(axis=0) . df.isnull().values.any() . False . Selecionando a informacao para predicao . y = df.Price . Escolhendo features . As colunas que sao inseridas em nosso modelo, e posteriormente serao utilizadas em nosso modelo sao chamadas de features. . features = [&#39;Rooms&#39;, &#39;Bathroom&#39;, &#39;Landsize&#39;, &#39;Lattitude&#39;, &#39;Longtitude&#39;] . por convencao as features sao chamadas de x . X = df[features] . Verificando se os dados fazem sentido . X.describe() . Rooms Bathroom Landsize Lattitude Longtitude . count 6196.000000 | 6196.000000 | 6196.000000 | 6196.000000 | 6196.000000 | . mean 2.931407 | 1.576340 | 471.006940 | -37.807904 | 144.990201 | . std 0.971079 | 0.711362 | 897.449881 | 0.075850 | 0.099165 | . min 1.000000 | 1.000000 | 0.000000 | -38.164920 | 144.542370 | . 25% 2.000000 | 1.000000 | 152.000000 | -37.855438 | 144.926198 | . 50% 3.000000 | 1.000000 | 373.000000 | -37.802250 | 144.995800 | . 75% 4.000000 | 2.000000 | 628.000000 | -37.758200 | 145.052700 | . max 8.000000 | 8.000000 | 37000.000000 | -37.457090 | 145.526350 | . X.head() . Rooms Bathroom Landsize Lattitude Longtitude . 1 2 | 1.0 | 156.0 | -37.8079 | 144.9934 | . 2 3 | 2.0 | 134.0 | -37.8093 | 144.9944 | . 4 4 | 1.0 | 120.0 | -37.8072 | 144.9941 | . 6 3 | 2.0 | 245.0 | -37.8024 | 144.9993 | . 7 2 | 1.0 | 256.0 | -37.8060 | 144.9954 | . Construindo o modelo . Os principais passos na construcao de um modelo sao: . Definir qual tipo de modelo sera utilizado. | from sklearn.tree import DecisionTreeRegressor # Model definition # The specification of random_state ensure same results on each run model = DecisionTreeRegressor(random_state=1) . Treinar, ou seja, capturar padroes presentes nos dados. | model.fit(X, y) . DecisionTreeRegressor(ccp_alpha=0.0, criterion=&#39;mse&#39;, max_depth=None, max_features=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, presort=&#39;deprecated&#39;, random_state=1, splitter=&#39;best&#39;) . Prever | Utilizando o comando .head() preveremos os primeiros 5 items do DataFrame . print(X.head()) model.predict(X.head()) . Rooms Bathroom Landsize Lattitude Longtitude 1 2 1.0 156.0 -37.8079 144.9934 2 3 2.0 134.0 -37.8093 144.9944 4 4 1.0 120.0 -37.8072 144.9941 6 3 2.0 245.0 -37.8024 144.9993 7 2 1.0 256.0 -37.8060 144.9954 . array([1035000., 1465000., 1600000., 1876000., 1636000.]) . Avaliar a precisao das predicoes do modelo. | Avaliar a assertividade do modelo . A forma mais fácil é gerar uma métrica única, como a média do valor absoluto dos erros. . erro = atual - predição . from sklearn.metrics import mean_absolute_error predicted_prices = model.predict(X) mean_absolute_error(y, predicted_prices) . 1115.7467183128902 . O ideal é que não seja utilizado o mesmo conjunto de dados para treinamento e avaliação do modelo. Caso sejam utilizados as mesmas amostras o modelo parecerá preciso, mas pode estar enviesado com base nos dados do treinamento, e assim que aplicado a novos conjuntos de dados não trará resultados assertivos. . Para resolver esse problema é possível separar os dados em dois conjuntos, um para treino e outro para validação. . from sklearn.model_selection import train_test_split # Splitting data into training and validation sets for both features and target train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0) # Define model model = DecisionTreeRegressor() # Fit model model.fit(train_X, train_y) # Get predicted prices val_predicitions = model.predict(val_X) print(mean_absolute_error(val_y, val_predicitions)) . 275105.4945125888 .",
            "url": "https://dmenezesgabriel.github.io/datadriven/machine%20learning/2020/09/21/_09_22_introducao_machine_learning.html",
            "relUrl": "/machine%20learning/2020/09/21/_09_22_introducao_machine_learning.html",
            "date": " • Sep 21, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://dmenezesgabriel.github.io/datadriven/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dmenezesgabriel.github.io/datadriven/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dmenezesgabriel.github.io/datadriven/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}